{
	"info": {
		"_postman_id": "2a0f408d-5835-4897-962d-b47f3d201818",
		"name": "user-management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7556965"
	},
	"item": [
		{
			"name": "Unsuccessful logins",
			"item": [
				{
					"name": "Login with empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - message and id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"pinelis\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with empty username Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - message and id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"NotExists\",\r\n    \"password\": \"NotExists\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all",
			"item": [
				{
					"name": "Get all successfull call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete functionality",
			"item": [
				{
					"name": "Delete - sucessfull scenario",
					"item": [
						{
							"name": "Register new user  for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Base username\r",
											"let baseUsername = \"Svetlana\";\r",
											"\r",
											"// Generate a unique value (e.g., timestamp or random number)\r",
											"let uniqueValue = Date.now(); // Timestamp\r",
											"// Alternatively, use a random number: Math.floor(Math.random() * 100000);\r",
											"\r",
											"// Combine base username with unique value\r",
											"let uniqueUsername = `${baseUsername}_${uniqueValue}`;\r",
											"\r",
											"pm.collectionVariables.set(\"usernameToDelete\", uniqueUsername)\r",
											"pm.collectionVariables.set(\"password\", \"pinelis\")\r",
											"\r",
											"// Set the unique username in the request body\r",
											"let requestBody = {\r",
											"    \"username\": uniqueUsername,\r",
											"    \"password\": \"pinelis\"\r",
											"};\r",
											"\r",
											"// Convert the object to a JSON string and set it as the body\r",
											"pm.request.body.raw = JSON.stringify(requestBody);\r",
											"// pm.request.body.update(JSON.stringify(requestBody));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"pinelis\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete - successfull scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains 'User deleted successfully.' message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"User deleted successfully.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/user/{{usernameToDelete}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"{{usernameToDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id does not contain delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.response.to.have.jsonBody('error', 'User not found.');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/user/{{usernameToDelete}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"{{usernameToDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all does not contain deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check that delete user does not exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var deletedUserName = pm.collectionVariables.get(\"usernameToDelete\")\r",
											"\r",
											"    var userExists = false;\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === deletedUserName) {\r",
											"            userExists = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(userExists).to.be.false;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete - user not found",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register functionality",
			"item": [
				{
					"name": "Successfull scenario",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Base username\r",
											"let baseUsername = \"Svetlana\";\r",
											"let basePassword = \"Pass\"\r",
											"\r",
											"// Generate a unique value (e.g., timestamp or random number)\r",
											"let uniqueValue = Date.now(); // Timestamp\r",
											"// Alternatively, use a random number: Math.floor(Math.random() * 100000);\r",
											"\r",
											"// Combine base username with unique value\r",
											"let uniqueUsername = `${baseUsername}_${uniqueValue}`;\r",
											"let uniquePassword = `${basePassword}_${uniqueValue}`;\r",
											"\r",
											"pm.collectionVariables.set(\"usernameToCreate\", uniqueUsername)\r",
											"pm.collectionVariables.set(\"passwordToCreate\", uniquePassword)\r",
											"\r",
											"// Set the unique username in the request body\r",
											"let requestBody = {\r",
											"    \"username\": uniqueUsername,\r",
											"    \"password\": uniquePassword\r",
											"};\r",
											"\r",
											"// Convert the object to a JSON string and set it as the body\r",
											"pm.request.body.raw = JSON.stringify(requestBody);\r",
											"// pm.request.body.update(JSON.stringify(requestBody));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById contains registered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response  username and password matches registered\", () => {\r",
											"    responseData = pm.response.json();\r",
											"\r",
											"    registeredUsername = pm.collectionVariables.get(\"usernameToCreate\")\r",
											"    registeredPassword = pm.collectionVariables.get(\"passwordToCreate\")\r",
											"\r",
											"    pm.expect(responseData.username).to.be.equal(registeredUsername)\r",
											"    pm.expect(responseData.password).to.be.equal(registeredPassword)\r",
											"});\r",
											"\r",
											"// Test to check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test to check if the response body contains the expected properties\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('username');\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"    pm.expect(pm.response.json()).to.have.property('password');\r",
											"});\r",
											"\r",
											"// Test to check if the response headers include the Content-Type header\r",
											"pm.test(\"Response includes Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/user/{{usernameToCreate}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"{{usernameToCreate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation errors",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "password",
			"value": "labaislapta",
			"type": "string"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "usernameToDelete",
			"value": ""
		},
		{
			"key": "usernameToCreate",
			"value": ""
		},
		{
			"key": "passwordToCreate",
			"value": ""
		}
	]
}